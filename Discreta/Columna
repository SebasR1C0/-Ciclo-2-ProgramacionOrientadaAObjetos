from tkinter import *
import numpy as np
import random as r 
n = solasol = solapsol = solanub = solapnub = psolapsol = psolasol = psolanub = psolapnub = nubasol = nubapsol = nubanub = nubapnub = 0
pnubasol = pnubapsol = pnubanub = pnubapnub = 0
while n <60 or n>90:
    n = int(input("Ingrese el valor de n: "))
climas = np.random.choice(["soleado", "parcialmente soleado", "nublado", "parcialmente nublado"], size=(1, n))
numeros = np.random.randint(low=17, high=30, size=(1, n))
for i in range (n): 
    valor = climas[0][i]
    if valor == "soleado":
        numeros[0][i] = r.randint(27, 30)
    elif valor == "parcialmente soleado":
        numeros[0][i] = r.randint(24, 26)
    elif valor == "parcialmente nublado":
        numeros[0][i] = r.randint(21, 23)
    elif valor == "nublado":
        numeros[0][i] = r.randint(17, 20)
matriz = np.vstack((numeros, climas))

for i in range (n-1):
    valor = climas[0][i]
    if valor == "soleado":
        if climas[0][i+1]== "soleado":
          solasol = solasol + 1 
        elif climas[0][i+1]=="parcialmente soleado":
          solapsol = solapsol + 1 
        elif climas[0][i+1]=="nublado":
          solanub = solanub + 1
        elif climas[0][i+1]=="parcialmente nublado":
          solapnub = solapnub + 1
    elif valor == "parcialmente soleado":
        if climas[0][i+1]== "soleado":
          psolasol = psolasol + 1 
        elif climas[0][i+1]=="parcialmente soleado":
          psolapsol = psolapsol + 1
        elif climas[0][i+1]=="nublado":
          psolanub = psolanub + 1
        elif climas[0][i+1]=="parcialmente nublado":
          psolapnub = psolapnub + 1
    elif valor == "nublado":
        if climas[0][i+1]== "soleado":
          nubasol = psolasol + 1 
        elif climas[0][i+1]=="parcialmente soleado":
          nubapsol = psolapsol + 1
        elif climas[0][i+1]=="nublado":
          nubanub = psolanub + 1
        elif climas[0][i+1]=="parcialmente nublado":
          nubapnub = psolapnub + 1
    elif valor == "parcialmente nublado":
        if climas[0][i+1]== "soleado":
          pnubasol = psolasol + 1 
        elif climas[0][i+1]=="parcialmente soleado":
          pnubapsol = psolapsol + 1
        elif climas[0][i+1]=="nublado":
          pnubanub = psolanub + 1
        elif climas[0][i+1]=="parcialmente nublado":
          pnubapnub = psolapnub + 1

probsas = solasol/(solasol+psolasol+nubasol+pnubasol)
probpsas=psolasol/(solasol+psolasol+nubasol+pnubasol)
probnas =nubasol/(solasol+psolasol+nubasol+pnubasol)
probpnas=pnubasol/(solasol+psolasol+nubasol+pnubasol)

probsaps = solapsol/(solapsol+psolapsol+nubapsol+pnubapsol)
probpsaps=psolapsol/(solapsol+psolapsol+nubapsol+pnubapsol)
probnaps =nubapsol/(solapsol+psolapsol+nubapsol+pnubapsol)
probpnaps=pnubapsol/(solapsol+psolapsol+nubapsol+pnubapsol)

probsan = solanub/(solanub+psolanub+nubanub+pnubanub)
probpsan=psolanub/(solanub+psolanub+nubanub+pnubanub)
probnan =nubanub/(solanub+psolanub+nubanub+pnubanub)
probpnan=pnubanub/(solanub+psolanub+nubanub+pnubanub)

probsapn = solapnub/(solapnub+psolapnub+nubapnub+pnubapnub)
probpsapn=psolapnub/(solapnub+psolapnub+nubapnub+pnubapnub)
probnapn =nubapnub/(solapnub+psolapnub+nubapnub+pnubapnub)
probpnapn=pnubapnub/(solapnub+psolapnub+nubapnub+pnubapnub)
          

matrix=np.array([[probsas,  probpsas,  probnas,  probpnas],
                 [probsaps, probpsaps, probnaps, probpnaps], 
                 [probsan,  probpsan,   probnan,  probpnan], 
                 [probsapn, probpsapn, probnapn, probpnapn]])

print("\n", matrix)    

states = ['soleado', 'nublado', 'parcialmente nublado','parcialmente soleado']
actual= climas[0][n-1]

def predecir_clima(matrix, states, actual):
    actual_idx = states.index(actual) 
    probabilidades_transicion = matrix[actual_idx] 
    nuevo_estado_idx = np.random.choice(len(states), p=probabilidades_transicion)
    nuevo_estado = states[nuevo_estado_idx] 
    return nuevo_estado
print()
for i in range(1): 
    print("Estado Actual:", actual,"\t\tTemperatura:", numeros[0][n-1])
    actual = predecir_clima(matrix, states, actual) 
print()
for i in range(4): 
    nuvtemp = Tk() 
    nuvtemp.geometry("1250x630") 
    if actual == "soleado":
        temp = r.randint(27, 30)
        #Cambiar direccion
        bg = PhotoImage(file = 'C:/Users/HP/source/repos/PythonApplication2/Discreta/Soleado.png')
    elif actual == "parcialmente soleado":
        temp = r.randint(24, 26)
        #Cambiar direccion
        bg = PhotoImage(file = 'C:/Users/HP/source/repos/PythonApplication2/Discreta/ParcialmenteSoleado.png')
    elif actual == "parcialmente nublado":
        temp = r.randint(21, 23)
        #Cambiar direccion
        bg = PhotoImage(file = 'C:/Users/HP/source/repos/PythonApplication2/Discreta/ParcialmenteNublado.png')
    elif actual == "nublado":
        temp = r.randint(17, 20)
        #Cambiar direccion
        bg = PhotoImage(file = 'C:/Users/HP/source/repos/PythonApplication2/Discreta/Nublado.png') 
    canvast = Canvas( nuvtemp, width =100, 
                     height = 100) 
    canvast.pack(fill = "both", expand = True) 
    canvast.create_image( 0, 0, image = bg,  
                         anchor = "nw") 
    text_label = Label(nuvtemp, text=f"Dia {i+1}", font=("Bauhaus 93", 50))
    text_label.place(x=0, y=0)
    text_label.config(bg="White")
    buttont = Button( nuvtemp, command=nuvtemp.destroy,text = "Continuar") 
    button1_canvas = canvast.create_window( 630, 500,  
                                           anchor = "nw", 
                                           window = buttont)  
    nuvtemp.mainloop()
    print("Dia", i+1, ":", actual, "\t\tTemperatura:", temp)
    actual = predecir_clima(matrix, states, actual)
